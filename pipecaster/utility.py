from inspect import signature
import sklearn.base

def is_classifier(obj):
    return getattr(obj, "_estimator_type", None) == "classifier"

def is_multi_input(pipe):
    """Detect if a pipeline component is multi-input by determining if the first argument to fit() is 'Xs' 
    """
    first_param = list(signature(pipe.fit).parameters.keys())[0]
    return first_param == 'Xs'

def get_clone(pipe, disable_custom_cloning = False):
    
    """Get a new copy of a transformer/estimator/predictor instance. 
    Parameters
    ----------
    pipe : transformer, estimator, predictor
        Pipeline building block
   disable_custom_cloning : bool
        Flag that disables use of the pipe.get_clone() method
    Returns
    -------
    New transformer/estimator/predictor instance generated by the pipe.get_clone() method, if there is one. If not, the returned instance is created by the generic sklearn.base.clone() function which basically does: pipe.__class__(**pipe.get_params())
    Notes
    -----
    Cutoming cloning via pipe.get_clone() has been added in Pipecaster to enable neural net warm starts that don't conform to sklearn's stateless cloning mechanism.
    """
    
    if hasattr(pipe, 'get_clone') and disable_custom_cloning == False:
        return pipe.get_clone()
    else:
        return sklearn.base.clone(pipe)